{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      products: [],\n      // Array to hold the products\n      cartItemCount: 0 // Initialize cart item count\n    };\n  },\n  created() {\n    this.fetchProducts(); // Fetch products when the component is created\n    this.updateCartItemCount(); // Update cart item count\n  },\n  methods: {\n    async fetchProducts() {\n      try {\n        const response = await axios.get('http://localhost:5555/products');\n        this.products = response.data.products; // Update the products array\n\n        // Sync products stock with items already in cart\n        const cart = JSON.parse(localStorage.getItem('cart')) || [];\n        cart.forEach(item => {\n          const product = this.products.find(p => p.id === item.id);\n          if (product) {\n            product.stock -= item.quantity; // Reduce stock based on cart items\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    addToCart(product) {\n      // Ensure orderQuantity is valid\n      if (product.orderQuantity <= 0 || product.orderQuantity > product.stock) {\n        return; // Do nothing if quantity is invalid\n      }\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\n      const existingProduct = cart.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.quantity += product.orderQuantity;\n      } else {\n        cart.push({\n          ...product,\n          quantity: product.orderQuantity\n        });\n      }\n      localStorage.setItem('cart', JSON.stringify(cart));\n      this.updateCartItemCount(); // Update cart item count after adding product\n\n      // Optionally, reduce stock in the frontend and persist in localStorage\n      product.stock -= product.orderQuantity;\n      if (product.stock < 0) product.stock = 0; // Ensure stock doesn't go below 0\n\n      // Reset orderQuantity to 1 after adding to cart\n      product.orderQuantity = 1; // Direct assignment without using this.$set\n\n      // Save updated stock in localStorage (optional, for reloading the page)\n      const updatedProducts = this.products.map(p => {\n        return {\n          ...p,\n          stock: p.stock\n        };\n      });\n      localStorage.setItem('products', JSON.stringify(updatedProducts));\n    },\n    goToCart() {\n      this.$router.push('/cart'); // Navigate to the cart page\n    },\n    updateCartItemCount() {\n      const cart = JSON.parse(localStorage.getItem('cart')) || [];\n      this.cartItemCount = cart.reduce((total, item) => total + item.quantity, 0);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","cartItemCount","created","fetchProducts","updateCartItemCount","methods","response","get","cart","JSON","parse","localStorage","getItem","forEach","item","product","find","p","id","stock","quantity","error","console","addToCart","orderQuantity","existingProduct","push","setItem","stringify","updatedProducts","map","goToCart","$router","reduce","total"],"sources":["C:\\laragon\\www\\admin_ecommerce\\vue\\src\\views\\product.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1 class=\"product-title\">Product List</h1>\r\n\r\n    <div v-if=\"products.length > 0\" class=\"product-container\">\r\n      <div class=\"product-card\" v-for=\"product in products\" :key=\"product.id\">\r\n        <img :src=\"`http://localhost:5555${product.image_url}`\" alt=\"Product Image\" class=\"product-image\" />\r\n        <h2 class=\"product-name\">{{ product.name }}</h2>\r\n        <p class=\"product-description\">{{ product.description }}</p>\r\n        <p class=\"product-price\">Price: ${{ product.price }}</p>\r\n        <p class=\"product-stock\" v-if=\"product.stock > 0\">In Stock: {{ product.stock }}</p>\r\n        <p class=\"product-stock-out\" v-else>Out of Stock</p>\r\n\r\n        <!-- Quantity Input and Add to Cart Button -->\r\n        <div v-if=\"product.stock > 0\" class=\"quantity-container\">\r\n          <input \r\n            v-model=\"product.orderQuantity\" \r\n            type=\"number\" \r\n            min=\"1\" \r\n            :max=\"product.stock\"\r\n            class=\"quantity-input\"\r\n            placeholder=\"Quantity\"\r\n          />\r\n          <button \r\n            @click=\"addToCart(product)\" \r\n            class=\"add-to-cart\"\r\n            :disabled=\"product.orderQuantity <= 0 || product.orderQuantity > product.stock\">\r\n            Add to Cart\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Add to Cart Button (for Out of Stock) -->\r\n        <button \r\n          v-else \r\n          class=\"add-to-cart\"\r\n          :disabled=\"true\">\r\n          Out of Stock\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p v-else>No products available at the moment.</p>\r\n\r\n    <!-- Cart Icon -->\r\n    <div class=\"cart-icon-container\">\r\n      <button @click=\"goToCart\" class=\"cart-icon\">\r\n        ðŸ›’ <span class=\"cart-count\">{{ cartItemCount }}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [], // Array to hold the products\r\n      cartItemCount: 0, // Initialize cart item count\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchProducts(); // Fetch products when the component is created\r\n    this.updateCartItemCount(); // Update cart item count\r\n  },\r\n  methods: {\r\n    async fetchProducts() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5555/products');\r\n        this.products = response.data.products; // Update the products array\r\n\r\n        // Sync products stock with items already in cart\r\n        const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n        cart.forEach(item => {\r\n          const product = this.products.find(p => p.id === item.id);\r\n          if (product) {\r\n            product.stock -= item.quantity; // Reduce stock based on cart items\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    addToCart(product) {\r\n      // Ensure orderQuantity is valid\r\n      if (product.orderQuantity <= 0 || product.orderQuantity > product.stock) {\r\n        return; // Do nothing if quantity is invalid\r\n      }\r\n\r\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n      const existingProduct = cart.find(item => item.id === product.id);\r\n\r\n      if (existingProduct) {\r\n        existingProduct.quantity += product.orderQuantity;\r\n      } else {\r\n        cart.push({ ...product, quantity: product.orderQuantity });\r\n      }\r\n\r\n      localStorage.setItem('cart', JSON.stringify(cart));\r\n      this.updateCartItemCount(); // Update cart item count after adding product\r\n\r\n      // Optionally, reduce stock in the frontend and persist in localStorage\r\n      product.stock -= product.orderQuantity;\r\n      if (product.stock < 0) product.stock = 0; // Ensure stock doesn't go below 0\r\n\r\n      // Reset orderQuantity to 1 after adding to cart\r\n      product.orderQuantity = 1; // Direct assignment without using this.$set\r\n\r\n      // Save updated stock in localStorage (optional, for reloading the page)\r\n      const updatedProducts = this.products.map(p => {\r\n        return { ...p, stock: p.stock };\r\n      });\r\n      localStorage.setItem('products', JSON.stringify(updatedProducts));\r\n    },\r\n    goToCart() {\r\n      this.$router.push('/cart'); // Navigate to the cart page\r\n    },\r\n    updateCartItemCount() {\r\n      const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n      this.cartItemCount = cart.reduce((total, item) => total + item.quantity, 0);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.product-title {\r\n  font-size: 2rem;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n.product-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  padding: 0 15px;\r\n}\r\n\r\n.product-card {\r\n  border: 1px solid #eee;\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.product-card:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.product-image {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: contain;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.product-name {\r\n  font-size: 1.2rem;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.product-description {\r\n  font-size: 1rem;\r\n  color: #666;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.product-price {\r\n  font-size: 1rem;\r\n  color: #333;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.product-stock,\r\n.product-stock-out {\r\n  font-size: 0.9rem;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.product-stock {\r\n  color: #4caf50;\r\n}\r\n\r\n.product-stock-out {\r\n  color: red;\r\n}\r\n\r\n.quantity-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.quantity-input {\r\n  width: 60px;\r\n  padding: 5px;\r\n  font-size: 1rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n}\r\n\r\n.add-to-cart {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.add-to-cart:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.add-to-cart:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.cart-icon-container {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 10;\r\n}\r\n\r\n.cart-icon {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 15px;\r\n  font-size: 1.5rem;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n.cart-icon:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.cart-count {\r\n  position: absolute;\r\n  top: -5px;\r\n  right: -5px;\r\n  background-color: red;\r\n  color: white;\r\n  font-size: 1rem;\r\n  padding: 5px;\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}