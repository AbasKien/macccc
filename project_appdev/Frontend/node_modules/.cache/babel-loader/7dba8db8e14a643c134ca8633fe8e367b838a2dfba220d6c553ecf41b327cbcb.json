{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      products: [],\n      // Array to hold the products\n      cartItemCount: 0 // Initialize cart item count\n    };\n  },\n  created() {\n    this.fetchProducts(); // Fetch products when the component is created\n    this.updateCartItemCount(); // Update cart item count\n  },\n  methods: {\n    async fetchProducts() {\n      try {\n        const response = await axios.get('http://localhost:5555/products');\n        this.products = response.data.products; // Update the products array\n        // Initialize orderQuantity for each product\n        this.products.forEach(product => {\n          this.$set(product, 'orderQuantity', 1); // Default quantity is 1\n        });\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    addToCart(product) {\n      if (product.orderQuantity <= 0 || product.orderQuantity > product.stock) {\n        // Do nothing if quantity is invalid\n        return;\n      }\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\n      const existingProduct = cart.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.quantity += product.orderQuantity;\n      } else {\n        cart.push({\n          ...product,\n          quantity: product.orderQuantity\n        });\n      }\n      localStorage.setItem('cart', JSON.stringify(cart));\n      this.updateCartItemCount(); // Update cart item count after adding product\n\n      // Optionally, reduce stock in the frontend\n      product.stock -= product.orderQuantity;\n      if (product.stock < 0) product.stock = 0; // Ensure stock doesn't go below 0\n\n      // Reset orderQuantity to 1 after adding to cart\n      this.$set(product, 'orderQuantity', 1);\n    },\n    goToCart() {\n      this.$router.push('/cart'); // Navigate to the cart page\n    },\n    updateCartItemCount() {\n      const cart = JSON.parse(localStorage.getItem('cart')) || [];\n      this.cartItemCount = cart.reduce((total, item) => total + item.quantity, 0);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","cartItemCount","created","fetchProducts","updateCartItemCount","methods","response","get","forEach","product","$set","error","console","addToCart","orderQuantity","stock","cart","JSON","parse","localStorage","getItem","existingProduct","find","item","id","quantity","push","setItem","stringify","goToCart","$router","reduce","total"],"sources":["C:\\laragon\\www\\admin_ecommerce\\vue\\src\\views\\product.vue"],"sourcesContent":["<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [], // Array to hold the products\r\n      cartItemCount: 0, // Initialize cart item count\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchProducts(); // Fetch products when the component is created\r\n    this.updateCartItemCount(); // Update cart item count\r\n  },\r\n  methods: {\r\n    async fetchProducts() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5555/products');\r\n        this.products = response.data.products; // Update the products array\r\n        // Initialize orderQuantity for each product\r\n        this.products.forEach(product => {\r\n          this.$set(product, 'orderQuantity', 1); // Default quantity is 1\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    addToCart(product) {\r\n      if (product.orderQuantity <= 0 || product.orderQuantity > product.stock) {\r\n        // Do nothing if quantity is invalid\r\n        return;\r\n      }\r\n\r\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n      const existingProduct = cart.find(item => item.id === product.id);\r\n\r\n      if (existingProduct) {\r\n        existingProduct.quantity += product.orderQuantity;\r\n      } else {\r\n        cart.push({ ...product, quantity: product.orderQuantity });\r\n      }\r\n\r\n      localStorage.setItem('cart', JSON.stringify(cart));\r\n      this.updateCartItemCount(); // Update cart item count after adding product\r\n\r\n      // Optionally, reduce stock in the frontend\r\n      product.stock -= product.orderQuantity;\r\n      if (product.stock < 0) product.stock = 0; // Ensure stock doesn't go below 0\r\n\r\n      // Reset orderQuantity to 1 after adding to cart\r\n      this.$set(product, 'orderQuantity', 1);\r\n    },\r\n    goToCart() {\r\n      this.$router.push('/cart'); // Navigate to the cart page\r\n    },\r\n    updateCartItemCount() {\r\n      const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n      this.cartItemCount = cart.reduce((total, item) => total + item.quantity, 0);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;;;AACA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,aAAa,EAAE,CAAC,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;IACtB,IAAI,CAACC,mBAAmB,CAAC,CAAC,EAAE;EAC9B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,gCAAgC,CAAC;QAClE,IAAI,CAACP,QAAO,GAAIM,QAAQ,CAACP,IAAI,CAACC,QAAQ,EAAE;QACxC;QACA,IAAI,CAACA,QAAQ,CAACQ,OAAO,CAACC,OAAM,IAAK;UAC/B,IAAI,CAACC,IAAI,CAACD,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE;QAC1C,CAAC,CAAC;MACJ,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDE,SAASA,CAACJ,OAAO,EAAE;MACjB,IAAIA,OAAO,CAACK,aAAY,IAAK,KAAKL,OAAO,CAACK,aAAY,GAAIL,OAAO,CAACM,KAAK,EAAE;QACvE;QACA;MACF;MAEA,IAAIC,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;MACzD,MAAMC,eAAc,GAAIL,IAAI,CAACM,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,KAAMf,OAAO,CAACe,EAAE,CAAC;MAEjE,IAAIH,eAAe,EAAE;QACnBA,eAAe,CAACI,QAAO,IAAKhB,OAAO,CAACK,aAAa;MACnD,OAAO;QACLE,IAAI,CAACU,IAAI,CAAC;UAAE,GAAGjB,OAAO;UAAEgB,QAAQ,EAAEhB,OAAO,CAACK;QAAc,CAAC,CAAC;MAC5D;MAEAK,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACZ,IAAI,CAAC,CAAC;MAClD,IAAI,CAACZ,mBAAmB,CAAC,CAAC,EAAE;;MAE5B;MACAK,OAAO,CAACM,KAAI,IAAKN,OAAO,CAACK,aAAa;MACtC,IAAIL,OAAO,CAACM,KAAI,GAAI,CAAC,EAAEN,OAAO,CAACM,KAAI,GAAI,CAAC,EAAE;;MAE1C;MACA,IAAI,CAACL,IAAI,CAACD,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC;IACxC,CAAC;IACDoB,QAAQA,CAAA,EAAG;MACT,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC,OAAO,CAAC,EAAE;IAC9B,CAAC;IACDtB,mBAAmBA,CAAA,EAAG;MACpB,MAAMY,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;MAC3D,IAAI,CAACnB,aAAY,GAAIe,IAAI,CAACe,MAAM,CAAC,CAACC,KAAK,EAAET,IAAI,KAAKS,KAAI,GAAIT,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IAC7E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}