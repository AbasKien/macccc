{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nexport default {\n  data() {\n    return {\n      cartItems: [] // Cart items stored in the state\n    };\n  },\n  computed: {\n    totalItems() {\n      return this.cartItems.reduce((total, item) => total + item.quantity, 0);\n    },\n    totalCost() {\n      return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  },\n  created() {\n    this.loadCart();\n  },\n  methods: {\n    // Load cart items from localStorage\n    loadCart() {\n      const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n      // Assume that you fetch the product details from the server or have them preloaded\n      cart.forEach(cartItem => {\n        // For demonstration, assuming a dummy API that fetches the product details by id\n        axios.get(`http://localhost:5555/getCart/${user.id}`).then(response => {\n          const product = response.data;\n          this.cartItems.push({\n            ...product,\n            quantity: cartItem.quantity // Set the quantity based on what's stored in cart\n          });\n        });\n      });\n    },\n    // Update the quantity of the product in the cart\n    updateQuantity(item) {\n      if (item.quantity <= 0) item.quantity = 1;\n      this.updateLocalStorage();\n    },\n    // Remove an item from the cart\n    removeItem(item) {\n      this.cartItems = this.cartItems.filter(cartItem => cartItem.id !== item.id);\n      this.updateLocalStorage();\n    },\n    // Update the cart in localStorage after any changes\n    updateLocalStorage() {\n      const updatedCart = this.cartItems.map(item => ({\n        id: item.id,\n        quantity: item.quantity\n      }));\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    },\n    // Handle checkout action (you can extend this function to integrate with a payment API)\n    checkout() {\n      alert(\"Proceeding to checkout...\");\n      // You can redirect to the checkout page here, or integrate with a payment gateway\n      this.$router.push(\"/checkout\");\n    }\n  }\n};","map":{"version":3,"names":["data","cartItems","computed","totalItems","reduce","total","item","quantity","totalCost","price","created","loadCart","methods","cart","JSON","parse","localStorage","getItem","forEach","cartItem","axios","get","user","id","then","response","product","push","updateQuantity","updateLocalStorage","removeItem","filter","updatedCart","map","setItem","stringify","checkout","alert","$router"],"sources":["C:\\laragon\\www\\project_appdev\\Frontend\\src\\views\\cart.vue"],"sourcesContent":["<template>\r\n  <div class=\"cart-page\">\r\n    <!-- Top Announcement Bar -->\r\n    <div class=\"announcement-bar\">\r\n      Free shipping, 30-day return or refund guarantee.\r\n    </div>\r\n\r\n    <!-- Cart Section -->\r\n    <section class=\"cart-section\">\r\n      <div class=\"cart-content\">\r\n        <h1>Your Cart</h1>\r\n        \r\n        <!-- Cart Items -->\r\n        <div v-if=\"cartItems.length > 0\" class=\"cart-items\">\r\n          <div\r\n            v-for=\"item in cartItems\"\r\n            :key=\"item.id\"\r\n            class=\"cart-item\"\r\n          >\r\n            <img\r\n              :src=\"`http://localhost:5555${item.image_url}`\"\r\n              :alt=\"item.name\"\r\n              class=\"cart-item-image\"\r\n            />\r\n            <div class=\"cart-item-info\">\r\n              <h2>{{ item.name }}</h2>\r\n              <p>Price: ${{ item.price }}</p>\r\n              <div class=\"quantity-container\">\r\n                <input\r\n                  type=\"number\"\r\n                  v-model.number=\"item.quantity\"\r\n                  min=\"1\"\r\n                  :max=\"item.stock\"\r\n                  @change=\"updateQuantity(item)\"\r\n                  class=\"quantity-input\"\r\n                />\r\n                <button @click=\"removeItem(item)\" class=\"remove-item\">Remove</button>\r\n              </div>\r\n              <p class=\"total-price\">Total: ${{ (item.price * item.quantity).toFixed(2) }}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Cart Total Summary -->\r\n          <div class=\"cart-summary\">\r\n            <p class=\"total-items\">Total Items: {{ totalItems }}</p>\r\n            <p class=\"total-cost\">Total Cost: ${{ totalCost.toFixed(2) }}</p>\r\n            <button @click=\"checkout\" class=\"checkout-button\">Proceed to Checkout</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Empty Cart Message -->\r\n        <p v-else class=\"empty-cart-message\">Your cart is empty. Start shopping now!</p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cartItems: [], // Cart items stored in the state\r\n    };\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.cartItems.reduce((total, item) => total + item.quantity, 0);\r\n    },\r\n    totalCost() {\r\n      return this.cartItems.reduce(\r\n        (total, item) => total + item.price * item.quantity,\r\n        0\r\n      );\r\n    },\r\n  },\r\n  created() {\r\n    this.loadCart();\r\n  },\r\n  methods: {\r\n    // Load cart items from localStorage\r\n    loadCart() {\r\n      const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n      // Assume that you fetch the product details from the server or have them preloaded\r\n      cart.forEach((cartItem) => {\r\n        // For demonstration, assuming a dummy API that fetches the product details by id\r\n        axios.get(`http://localhost:5555/getCart/${user.id}`).then((response) => {\r\n          const product = response.data;\r\n          this.cartItems.push({\r\n            ...product,\r\n            quantity: cartItem.quantity, // Set the quantity based on what's stored in cart\r\n          });\r\n        });\r\n      });\r\n    },\r\n    // Update the quantity of the product in the cart\r\n    updateQuantity(item) {\r\n      if (item.quantity <= 0) item.quantity = 1;\r\n      this.updateLocalStorage();\r\n    },\r\n    // Remove an item from the cart\r\n    removeItem(item) {\r\n      this.cartItems = this.cartItems.filter((cartItem) => cartItem.id !== item.id);\r\n      this.updateLocalStorage();\r\n    },\r\n    // Update the cart in localStorage after any changes\r\n    updateLocalStorage() {\r\n      const updatedCart = this.cartItems.map((item) => ({\r\n        id: item.id,\r\n        quantity: item.quantity,\r\n      }));\r\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n    },\r\n    // Handle checkout action (you can extend this function to integrate with a payment API)\r\n    checkout() {\r\n      alert(\"Proceeding to checkout...\");\r\n      // You can redirect to the checkout page here, or integrate with a payment gateway\r\n      this.$router.push(\"/checkout\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Cart Page Styles */\r\n.cart-page {\r\n  background-color: #f9f9f9;\r\n  padding: 50px;\r\n}\r\n\r\n.announcement-bar {\r\n  background-color: #070707;\r\n  color: #e33131;\r\n  text-align: center;\r\n  padding: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.cart-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh1 {\r\n  font-size: 36px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cart-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.cart-item-image {\r\n  width: 120px;\r\n  height: 120px;\r\n  object-fit: cover;\r\n  border-radius: 8px;\r\n}\r\n\r\n.cart-item-info {\r\n  flex: 1;\r\n  padding-left: 15px;\r\n}\r\n\r\n.cart-item-info h2 {\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.cart-item-info p {\r\n  font-size: 16px;\r\n  color: #555;\r\n}\r\n\r\n.quantity-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.quantity-input {\r\n  width: 60px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.remove-item {\r\n  background-color: #ff6f61;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.remove-item:hover {\r\n  background-color: #e04e47;\r\n}\r\n\r\n.total-price {\r\n  font-size: 16px;\r\n  color: #555;\r\n  margin-top: 10px;\r\n}\r\n\r\n.cart-summary {\r\n  margin-top: 30px;\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.total-items,\r\n.total-cost {\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.checkout-button {\r\n  background-color: #ebcf35;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.checkout-button:hover {\r\n  background-color: #63d031;\r\n}\r\n\r\n.empty-cart-message {\r\n  font-size: 18px;\r\n  color: #555;\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;AA0DA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACF,SAAS,CAACG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAI,GAAIC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;IACzE,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACP,SAAS,CAACG,MAAM,CAC1B,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAI,GAAIC,IAAI,CAACG,KAAI,GAAIH,IAAI,CAACC,QAAQ,EACnD,CACF,CAAC;IACH;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,QAAQA,CAAA,EAAG;MACT,MAAME,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;MAC3D;MACAJ,IAAI,CAACK,OAAO,CAAEC,QAAQ,IAAK;QACzB;QACAC,KAAK,CAACC,GAAG,CAAC,iCAAiCC,IAAI,CAACC,EAAE,EAAE,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;UACvE,MAAMC,OAAM,GAAID,QAAQ,CAACzB,IAAI;UAC7B,IAAI,CAACC,SAAS,CAAC0B,IAAI,CAAC;YAClB,GAAGD,OAAO;YACVnB,QAAQ,EAAEY,QAAQ,CAACZ,QAAQ,CAAE;UAC/B,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACD;IACAqB,cAAcA,CAACtB,IAAI,EAAE;MACnB,IAAIA,IAAI,CAACC,QAAO,IAAK,CAAC,EAAED,IAAI,CAACC,QAAO,GAAI,CAAC;MACzC,IAAI,CAACsB,kBAAkB,CAAC,CAAC;IAC3B,CAAC;IACD;IACAC,UAAUA,CAACxB,IAAI,EAAE;MACf,IAAI,CAACL,SAAQ,GAAI,IAAI,CAACA,SAAS,CAAC8B,MAAM,CAAEZ,QAAQ,IAAKA,QAAQ,CAACI,EAAC,KAAMjB,IAAI,CAACiB,EAAE,CAAC;MAC7E,IAAI,CAACM,kBAAkB,CAAC,CAAC;IAC3B,CAAC;IACD;IACAA,kBAAkBA,CAAA,EAAG;MACnB,MAAMG,WAAU,GAAI,IAAI,CAAC/B,SAAS,CAACgC,GAAG,CAAE3B,IAAI,KAAM;QAChDiB,EAAE,EAAEjB,IAAI,CAACiB,EAAE;QACXhB,QAAQ,EAAED,IAAI,CAACC;MACjB,CAAC,CAAC,CAAC;MACHS,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACqB,SAAS,CAACH,WAAW,CAAC,CAAC;IAC3D,CAAC;IACD;IACAI,QAAQA,CAAA,EAAG;MACTC,KAAK,CAAC,2BAA2B,CAAC;MAClC;MACA,IAAI,CAACC,OAAO,CAACX,IAAI,CAAC,WAAW,CAAC;IAChC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}