{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      products: [],\n      // Array to store products\n      cartItemCount: 0,\n      // Tracks the cart item count\n      loading: true // Loading state\n    };\n  },\n  created() {\n    this.fetchProducts();\n    this.updateCartItemCount();\n  },\n  methods: {\n    // Fetch products from the backend\n    async fetchProducts() {\n      try {\n        const response = await axios.get(\"http://localhost:5555/products\");\n        this.products = response.data.products.map(product => ({\n          ...product,\n          orderQuantity: 1 // Initialize the order quantity\n        }));\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Add product to the cart\n    async addToCart(product) {\n      const userId = 1; // Replace with actual logged-in user ID\n      try {\n        const response = await axios.post(\"http://localhost:5555/cart/addToCart\", {\n          userId,\n          // Include user ID\n          productId: product.id,\n          quantity: product.orderQuantity\n        });\n        if (response.status === 200) {\n          // Update cart count and reset quantity\n          this.updateCartItemCount();\n          product.orderQuantity = 1;\n\n          // Navigate to cart\n          this.$router.push(\"/cart\");\n        }\n      } catch (error) {\n        console.error(\"Error adding to cart:\", error);\n      }\n    },\n    // Update cart item count\n    async updateCartItemCount() {\n      const userId = 1; // Replace with actual logged-in user ID\n      try {\n        const response = await axios.get(\"http://localhost:5555/cart/getCartItems\", {\n          params: {\n            userId\n          } // Send the user ID as a query parameter\n        });\n        if (response.status === 200) {\n          this.cartItemCount = response.data.count;\n        }\n      } catch (error) {\n        console.error(\"Error fetching cart item count:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","cartItemCount","loading","created","fetchProducts","updateCartItemCount","methods","response","get","map","product","orderQuantity","error","console","addToCart","userId","post","productId","id","quantity","status","$router","push","params","count"],"sources":["C:\\laragon\\www\\project_appdev\\Frontend\\src\\views\\product.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-page\">\r\n    <!-- Top Announcement Bar -->\r\n    <div class=\"announcement-bar\">\r\n      Free shipping, 30-day return or refund guarantee.\r\n    </div>\r\n\r\n    <!-- Header -->\r\n    <header class=\"header\">\r\n      <div class=\"logo\">Male Fashion</div>\r\n      <nav class=\"nav\">\r\n        <router-link to=\"/home\" class=\"nav-link\" :class=\"{ active: $route.path === '/home' }\">\r\n          Home\r\n        </router-link>\r\n        <router-link to=\"/product\" class=\"nav-link\" :class=\"{ active: $route.path === '/product' }\">\r\n          Shop\r\n        </router-link>\r\n        <router-link to=\"/orders\" class=\"nav-link\" :class=\"{ active: $route.path === '/orders' }\">\r\n          Orders\r\n        </router-link>\r\n      </nav>\r\n      <div class=\"user-controls\">\r\n        <router-link to=\"/cart\" class=\"cart\" aria-label=\"Cart\">\r\n          <img src=\"https://cdn-icons-png.flaticon.com/512/5582/5582883.png\" alt=\"Cart\" class=\"cart-logo\" />\r\n          <span class=\"cart-count\" v-if=\"cartItemCount > 0\">{{ cartItemCount }}</span>\r\n        </router-link>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- Products Section -->\r\n    <section class=\"products\">\r\n      <div class=\"content\">\r\n        <h1>Our Products</h1>\r\n        <p class=\"description\">\r\n          Discover our exclusive collection of men's fashion. Style that fits you perfectly.\r\n        </p>\r\n        <div v-if=\"loading\" class=\"loading\">Loading products...</div>\r\n        <div v-else-if=\"products.length > 0\" class=\"product-grid\">\r\n          <div class=\"product-card\" v-for=\"product in products\" :key=\"product.id\">\r\n            <img :src=\"`http://localhost:5555${product.image_url}`\" :alt=\"product.name\" class=\"product-image\" />\r\n            <h2 class=\"product-name\">{{ product.name }}</h2>\r\n            <p class=\"product-price\">Price: ${{ product.price }}</p>\r\n\r\n            <div class=\"quantity-container\">\r\n              <input\r\n                v-model.number=\"product.orderQuantity\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                class=\"quantity-input\"\r\n              />\r\n              <button @click=\"addToCart(product)\" class=\"add-to-cart\">\r\n                Add to Cart\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <p v-else>No products available at the moment.</p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [], // Array to store products\r\n      cartItemCount: 0, // Tracks the cart item count\r\n      loading: true, // Loading state\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchProducts();\r\n    this.updateCartItemCount();\r\n  },\r\n  methods: {\r\n    // Fetch products from the backend\r\n    async fetchProducts() {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5555/products\");\r\n        this.products = response.data.products.map((product) => ({\r\n          ...product,\r\n          orderQuantity: 1, // Initialize the order quantity\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching products:\", error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // Add product to the cart\r\n    async addToCart(product) {\r\n      const userId = 1; // Replace with actual logged-in user ID\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5555/cart/addToCart\", {\r\n          userId, // Include user ID\r\n          productId: product.id,\r\n          quantity: product.orderQuantity,\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          // Update cart count and reset quantity\r\n          this.updateCartItemCount();\r\n          product.orderQuantity = 1;\r\n\r\n          // Navigate to cart\r\n          this.$router.push(\"/cart\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding to cart:\", error);\r\n      }\r\n    },\r\n\r\n    // Update cart item count\r\n    async updateCartItemCount() {\r\n      const userId = 1; // Replace with actual logged-in user ID\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5555/cart/getCartItems\", {\r\n          params: { userId }, // Send the user ID as a query parameter\r\n        });\r\n        if (response.status === 200) {\r\n          this.cartItemCount = response.data.count;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching cart item count:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n.loading {\r\n  font-size: 18px;\r\n  color: #555;\r\n  text-align: center;\r\n  margin: 50px 0;\r\n}\r\n\r\n/* Global Styles */\r\nbody {\r\n  margin: 0;\r\n  font-family: \"Arial\", sans-serif;\r\n}\r\n\r\n/* Announcement Bar */\r\n.announcement-bar {\r\n  background-color: #070707;\r\n  color: #e33131;\r\n  text-align: center;\r\n  padding: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Header */\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: #fff;\r\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.logo {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #000;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n}\r\n\r\n.nav-link {\r\n  margin: 0 15px;\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-weight: bold;\r\n  position: relative;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.nav-link::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 0;\r\n  height: 2px;\r\n  background-color: rgb(255, 96, 56);\r\n  transition: width 0.3s;\r\n}\r\n\r\n.nav-link:hover::after,\r\n.nav-link.active::after {\r\n  width: 100%;\r\n}\r\n\r\n.nav-link:hover {\r\n  color: #f75151;\r\n}\r\n\r\n/* User Controls */\r\n.user-controls {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.cart {\r\n  position: relative;\r\n  margin-right: 20px;\r\n  text-decoration: none;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.cart-logo {\r\n  width: 24px;  /* Adjust size as needed */\r\n  height: 24px; /* Adjust size as needed */\r\n  margin-right: 5px;  /* Adjust the space between logo and count */\r\n}\r\n\r\n.cart-count {\r\n  position: absolute;\r\n  top: -5px;\r\n  right: -10px;\r\n  background: #ff6f61;\r\n  color: #fff;\r\n  font-size: 12px;\r\n  padding: 3px 7px;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* Products Section */\r\n.products {\r\n  padding: 50px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\nh1 {\r\n  font-size: 48px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.description {\r\n  margin-bottom: 40px;\r\n  font-size: 18px;\r\n  color: #555;\r\n}\r\n\r\n.product-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.product-card {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n\r\n.product-image {\r\n  width: 100%;\r\n  height: auto;\r\n  margin-bottom: 15px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.product-name {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.product-price {\r\n  font-size: 16px;\r\n  color: #555;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.add-to-cart {\r\n  background-color: #ebcf35;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.add-to-cart:hover {\r\n  background-color: #63d031;\r\n}\r\n\r\n/* Fade Transition */\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"],"mappings":";;AA+DA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,aAAa,EAAE,CAAC;MAAE;MAClBC,OAAO,EAAE,IAAI,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5B,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMF,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,gCAAgC,CAAC;QAClE,IAAI,CAACR,QAAO,GAAIO,QAAQ,CAACR,IAAI,CAACC,QAAQ,CAACS,GAAG,CAAEC,OAAO,KAAM;UACvD,GAAGA,OAAO;UACVC,aAAa,EAAE,CAAC,CAAE;QACpB,CAAC,CAAC,CAAC;MACL,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,UAAU;QACR,IAAI,CAACV,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACA,MAAMY,SAASA,CAACJ,OAAO,EAAE;MACvB,MAAMK,MAAK,GAAI,CAAC,EAAE;MAClB,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMT,KAAK,CAACkB,IAAI,CAAC,sCAAsC,EAAE;UACxED,MAAM;UAAE;UACRE,SAAS,EAAEP,OAAO,CAACQ,EAAE;UACrBC,QAAQ,EAAET,OAAO,CAACC;QACpB,CAAC,CAAC;QAEF,IAAIJ,QAAQ,CAACa,MAAK,KAAM,GAAG,EAAE;UAC3B;UACA,IAAI,CAACf,mBAAmB,CAAC,CAAC;UAC1BK,OAAO,CAACC,aAAY,GAAI,CAAC;;UAEzB;UACA,IAAI,CAACU,OAAO,CAACC,IAAI,CAAC,OAAO,CAAC;QAC5B;MACF,EAAE,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAED;IACA,MAAMP,mBAAmBA,CAAA,EAAG;MAC1B,MAAMU,MAAK,GAAI,CAAC,EAAE;MAClB,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,yCAAyC,EAAE;UAC1Ee,MAAM,EAAE;YAAER;UAAO,CAAC,CAAE;QACtB,CAAC,CAAC;QACF,IAAIR,QAAQ,CAACa,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACnB,aAAY,GAAIM,QAAQ,CAACR,IAAI,CAACyB,KAAK;QAC1C;MACF,EAAE,OAAOZ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}